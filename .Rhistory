master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = "address")
head(master)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address")
)
head(master)
storesKDE <- cbind(stores[,1:2], kde.stores.est, kde.stores.est*nrow(crimes))
names(storesKDE)[3:4] <- c("KDEraw", "KDEscaled")
write.csv(storesKDE, "storesKDE.csv", row.names = F)
econ <- read.csv("socio_econ.csv", header=T, stringsAsFactors = F)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
head(master)
names(master)
master <- master[,-c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
"average.SAT.score", "High.school.drop.", "TotStud")]
master <- master[,!c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
"average.SAT.score", "High.school.drop.", "TotStud")]
master <- master[,c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
"average.SAT.score", "High.school.drop.", "TotStud")]
head(master)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
# master <- master[,c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
#                      "average.SAT.score", "High.school.drop.", "TotStud")]
master <- subset(master,
select = -c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
"average.SAT.score", "High.school.drop.", "TotStud"))
master <- subset(master,
select = -c("X.", "NA."))
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
# master <- master[,c("X.", "NA.", "Lat.y", "Long.y", "City", "State",
#                      "average.SAT.score", "High.school.drop.", "TotStud")]
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
head(master)
write.csv(master, "MASTER_DATA.csv", row.names=F)
master <- read.csv("MASTER_DATA.csv", stringsAsFactors = F, header=T)
head(master)
mod7 <- lm(crimes2014 ~ KDEraw, data master)
mod7 <- lm(crimes2014 ~ KDEraw, data = master)
require(gdata)
library(dplyr)
#setwd("~/Documents/DSI/notes/2-SYS-6018/Case Study 1 - crime/SYS-6018-cs1")
# LOAD THE DATA
stores <- read.csv("stores_info.csv", stringsAsFactors = F)
crimes <- read.csv("Annual_Crime_Dataset_2015.csv", stringsAsFactors = F)
crimes <- filter(crimes, GO.X.Coordinate != "") # remove crimes that have no location data
####
getCrimes <- function(add, crimes) {
# if there's a comma in the address, strip off what's before the comma (shopping mall name, etc.)
if (grepl(",", add)) {
add <- gsub("^.+, ", "", add)
}
# split on blank space
addS <- unlist(strsplit(add, " "))
# find the addresses that match
winners <- sapply(crimes$GO.Location, addyPart, addS = addS, USE.NAMES = F)
# subset to only those addresses
addDF <- crimes[winners, ]
# print the count
print(paste(add, nrow(addDF)))
# return the subset
addDF
}
addyPart <- function(addToCheck, addS) {
# set the threshold for what percentage of the address has to match
thresh <- .6 * length(addS)
# initiate the count of matching words
count <- 0
# make both lower case
addS <- tolower(addS)
addToCheck <- tolower(addToCheck)
# store the house number (or if there isn't one, store FALSE)
if (grepl('[0-9]', addS[1])) {
num <- addS[1]
} else {
num <- FALSE
}
# for each word in the address, store the count of how many are in the address we're checking
for (i in 1:length(addS)){
if (grepl(paste('\\b',addS[i],'\\b',sep=''), addToCheck)) {
count <- count + 1
}
}
if (count >= thresh) {
# if we pass the threshold AND it matches the house number, return TRUE
if (num != FALSE & grepl(paste('\\b',num,'\\b',sep=''), addToCheck)) {
TRUE
} else {
FALSE
}
} else {
FALSE
}
}
### FAKE UNIT TEST
#addyPart("Ben White 710", c("710", "E", "Ben", "White", "Blvd")) # should be TRUE
#addyPart("Ben White", c("710", "E", "Ben", "White", "Blvd")) # should be FALSE
#bw <- getCrimes("710 E Ben White Blvd", crimes)
# make a list with a data frame for each store and all its crimes
scdf <- lapply(stores$address, getCrimes, crimes = crimes)
#make a data frame with counts for each address
storeCrimeCount <- data.frame(store = character(nrow(stores)),
address = character(nrow(stores)),
crimes = numeric(nrow(stores)), stringsAsFactors = F)
for (j in 1:nrow(stores)) {
storeCrimeCount[j, ] <- c(stores$store[j], stores$address[j], nrow(scdf[[j]]))
}
# look at the addresses with zero crimes
zeros <- storeCrimeCount[storeCrimeCount$crimes==0, ]
# what percentage of our data set is zero?
nrow(zeros) / nrow(stores)
# create data.frame with store info and total crimes count
stores <- cbind(stores, as.numeric(storeCrimeCount$crimes))
names(stores)[ncol(stores)] <- "crimes2014"
head(stores)
##### bring in economic data
econ <- read.csv("socio_econ.csv", header=T, stringsAsFactors = F)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
##### subset and save master
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
#write.csv(master, "MASTER_DATA.csv", row.names=F)
write.csv(master, "MASTER_DATA.csv", row.names=F)
master <- read.csv("MASTER_DATA.csv", stringsAsFactors = F, header=T)
head(master)
mod7 <- lm(crimes2014 ~ KDEraw, data = master)
summary(mod7)
mod7 <- lm(crimes2014 ~ KDEscaled, data = master)
mod7 <- lm(crimes2014 ~ KDEraw, data = master)
mod8 <- lm(crimes2014 ~ KDEscaled, data = master)
mod9 <- lm(crimes2014 ~ KDEraw, data = master)
summary(mod8)
summary(mod9)
mod9 <- lm(crimes2014 ~ KDEraw + store, data = master)
summary(mod9)
mod10 <- lm(crimes2014 ~ KDEraw + store + CollegeGradPercent, data = master)
summary(mod10)
mod4 <- lm(crimes2014 ~ CollegeGradPercent + store, data = master)
summary(mod4)
preds1 <- data.frame(actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod10 = predict(mod10))
preds1
plot(preds1$actual)
preds1 <- data.frame(actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod9 = predict(mod9),
mod10 = predict(mod10))
points(preds1$mod4, col="red")
plot(preds1$actual)
points(preds1$mod4, col="red")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="green")
resid(mo4)
resid(mod4)
preds1 <- data.frame(actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod9 = predict(mod9),
mod10 = predict(mod10))
plot(resid(mod4), col="red")
plot(resid(mod4), col="red")
points(resid(mod9), col="blue")
points(resid(mod10), col="green") # this looks best
mod9 <- lm(crimes2014 ~ KDEraw + store, data = master)
mod10 <- lm(crimes2014 ~ KDEraw + store + CollegeGradPercent, data = master)
points(resid(mod9), col="blue")
points(resid(mod10), col="green") # this looks best
abline(h=0, lty=2)
plot(resid(mod4), col="red")
points(resid(mod9), col="blue")
#### mod9 and mod10 are almost equivalent, but they're the best
abline(h=0, lty=2)
preds1 <- data.frame(actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod7 = predict(mod7)
mod9 = predict(mod9),
mod10 = predict(mod10))
preds1 <- data.frame(actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod7 = predict(mod7),
mod9 = predict(mod9),
mod10 = predict(mod10))
plot(preds1$actual)
points(preds1$mod4, col="red")
points(preds1$mod7, col="yellow")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="green")
plot(resid(mod4), col="red")
points(resid(mod7), col="yellow")
points(resid(mod9), col="blue")
#### mod9 is better higher up, but they're close low
abline(h=0, lty=2)
plot(resid(mod4), col="red")
points(resid(mod7), col="green")
points(resid(mod9), col="blue")
#### mod9 is better higher up, but they're close low
abline(h=0, lty=2)
summary(mod9)
nrow(master)
summary(mod1)$coefficients
nrow(summary(mod1)$coefficients)
resid(mod)
resid(mod4)
resid(mod1)^2
MSE <- function(mod, df) {
sum(resid(mod)^2) / (nrow(df) - nrow(summary(mod)$coefficients))
}
MSE(mod4, master)
MSE(mod7, master)
MSE(mod9, master)
summary(mod9)
summary(mod10)
preds1
preds1[,c("actual", "mod9")]
preds1[order(preds1$actual),c("actual", "mod9")]
preds1 <- data.frame(store = master$store,
actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod7 = predict(mod7),
mod9 = predict(mod9),
mod10 = predict(mod10))
plot(preds1$actual, pch=preds1$store)
points(preds1$mod4, col="red")
points(preds1$mod7, col="green")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="yellow")
preds1 <- data.frame(store = as.factor(master$store),
actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod7 = predict(mod7),
mod9 = predict(mod9),
mod10 = predict(mod10))
plot(preds1$actual, pch=preds1$store)
points(preds1$mod4, col="red")
points(preds1$mod7, col="green")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="yellow")
preds1 <- data.frame(store = as.factor(master$store),
actual = master$crimes2014,
mod1 = predict(mod1),
mod2 = predict(mod2),
mod4 = predict(mod4),
mod7 = predict(mod7),
mod9 = predict(mod9),
mod10 = predict(mod10))
# plot values
plot(preds1$actual, pch=preds1$store)
points(preds1$mod4, col="red")
points(preds1$mod7, col="green")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="yellow")
plot(preds1$actual, col=preds1$store)
plot(preds1$actual, pch=preds1$store)
plot(preds1$actual, pch=as.numeric(preds1$store))
points(preds1$mod4, col="red")
points(preds1$mod7, col="green")
points(preds1$mod9, col="blue")
points(preds1$mod10, col="yellow")
plot(preds1$actual, pch=as.numeric(preds1$store))
head(stores_stops)
require(gdata)
library(ks)
library(RColorBrewer)
require(rgdal)
library(MASS)
require(dplyr)
source("CrimeUtil.R")
#setwd("~/Documents/DSI/notes/2-SYS-6018/Case Study 1 - crime/SYS-6018-cs1")
# LOAD THE DATA
# boundary <-readOGR(dsn="Neighborhood-Planning-Areas",layer="geo_export_bf249074-a2fc-4d35-b70e-d75de1175a06")
# plot(boundary)
boundary <-readOGR(dsn=".", layer="geo_export_7c52f690-58f6-4f4a-96fa-95df45d3770a")
zips <-readOGR(dsn="Zipcodes", layer="geo_export_314dd5e2-dc9d-4a81-b190-c1dd214574c4")
# This will draw the entire map of Austin. Available for export from:
# https://data.austintexas.gov/Government/Austin-Police-Sectors-and-Districts/bh6h-vpxb
#boundary <-readOGR(dsn="Austin Police Sectors and Districts", layer="geo_export_7c52f690-58f6-4f4a-96fa-95df45d3770a")
plot(boundary)
# plot(zips)
stores <- read.csv("stores_info.csv", stringsAsFactors = F)
store_coords <- data.frame(x=stores$Long, y=stores$Lat)
coordinates(store_coords) <- c('x','y')
plot(store_coords, col="blue", add=T)
crimes <- read.csv("Annual_Crime_Dataset_2015.csv", stringsAsFactors = F)
crimes <- filter(crimes, GO.X.Coordinate != "") # remove crimes that have no location data
coords <- data.frame(x=crimes$GO.X.Coordinate, y=crimes$GO.Y.Coordinate)
coordinates(coords) <- c('x','y')
proj4string(coords) <- CRS("+init=epsg:2277")
coords_r <- spTransform(coords,CRS("+init=epsg:4326"))
crimes$long <- coordinates(coords_r)[,1]
crimes$lat <- coordinates(coords_r)[,2]
# Reproject crime lon/lat points to meters
crime.locations.lonlat = cbind(crimes$long, crimes$lat)
crime.locations.meters = project(crime.locations.lonlat, proj="+init=epsg:26971")
# Reproject store location points to meters
store.locations.lonlat = cbind(stores$Long, stores$Lat)
store.locations.meters = project(store.locations.lonlat, proj="+init=epsg:26971")
#####
# Reproject store location (BUT TRY TO KEEP THE OTHER INFO)
store.locations.lonlat = cbind(stores$Long, stores$Lat)
store.locations.meters = project(store.locations.lonlat, proj="+init=epsg:26971")
storesFULL <- cbind(stores, store.locations.meters)
storesFULL$store <- as.factor(storesFULL$store)
storesFULL$walORnot <- ifelse(storesFULL$store=="Walmart", 19, 18)
storesFULL$pointsize <- ifelse(storesFULL$store=="Walmart", 2, 1)
coordinates(storesFULL) <- c('1','2')
#####
# Add distance to closest bus stops in meters from each store location
# NOTE: This code needs to be run after 'Load-Austin-data.R'
# Source for MetroBus lines/MetroRail stops:
# https://data.texas.gov/Capital-Metro/GTFS/r4v4-vz24
st <- read.table("stops.txt", sep=",", header=T)
stops <- as.matrix(select(st, stop_lon, stop_lat))
stops.meters = project(stops, proj="+init=epsg:26971")
# Find the shortest distance in meters to the closest bus stop from
# each store address
closest.stops <- data.frame(get.min.distances(store.locations.meters,stops.meters))
names(closest.stops) <- 'closest stops in meters'
stores_stops <- cbind(stores, closest.stops)
stores_stops <- select(stores_stops, address, `closest stops in meters`)
head(stores_stops)
write.csv(stores_stops, "stores_stops.csv", row.names=F)
bus <- read.csv("stores_stops.csv", header=T, stringsAsFactors = F)
head(bus)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
##### bring in bus stop data
bus <- read.csv("stores_stops.csv", header=T, stringsAsFactors = F)
master <- merge(master, bus, by = "address")
##### subset and save master
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
#write.csv(master, "MASTER_DATA.csv", row.names=F)
head(master)
closest.stops <- data.frame(get.min.distances(store.locations.meters,stops.meters))
names(closest.stops) <- 'closest_stops_in_meters'
stores_stops <- cbind(stores, closest.stops)
stores_stops <- select(stores_stops, address, `closest_stops_in_meters`)
write.csv(stores_stops, "stores_stops.csv", row.names=F)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
##### bring in bus stop data
bus <- read.csv("stores_stops.csv", header=T, stringsAsFactors = F)
master <- merge(master, bus, by = "address")
##### subset and save master
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
head(master)
require(gdata)
library(MASS)
library(dplyr)
#setwd("~/Documents/DSI/notes/2-SYS-6018/Case Study 1 - crime/SYS-6018-cs1")
# LOAD THE DATA
stores <- read.csv("stores_info.csv", stringsAsFactors = F)
crimes <- read.csv("Annual_Crime_Dataset_2015.csv", stringsAsFactors = F)
crimes <- filter(crimes, GO.X.Coordinate != "") # remove crimes that have no location data
####
getCrimes <- function(add, crimes) {
# if there's a comma in the address, strip off what's before the comma (shopping mall name, etc.)
if (grepl(",", add)) {
add <- gsub("^.+, ", "", add)
}
# split on blank space
addS <- unlist(strsplit(add, " "))
# find the addresses that match
winners <- sapply(crimes$GO.Location, addyPart, addS = addS, USE.NAMES = F)
# subset to only those addresses
addDF <- crimes[winners, ]
# print the count
print(paste(add, nrow(addDF)))
# return the subset
addDF
}
addyPart <- function(addToCheck, addS) {
# set the threshold for what percentage of the address has to match
thresh <- .6 * length(addS)
# initiate the count of matching words
count <- 0
# make both lower case
addS <- tolower(addS)
addToCheck <- tolower(addToCheck)
# store the house number (or if there isn't one, store FALSE)
if (grepl('[0-9]', addS[1])) {
num <- addS[1]
} else {
num <- FALSE
}
# for each word in the address, store the count of how many are in the address we're checking
for (i in 1:length(addS)){
if (grepl(paste('\\b',addS[i],'\\b',sep=''), addToCheck)) {
count <- count + 1
}
}
if (count >= thresh) {
# if we pass the threshold AND it matches the house number, return TRUE
if (num != FALSE & grepl(paste('\\b',num,'\\b',sep=''), addToCheck)) {
TRUE
} else {
FALSE
}
} else {
FALSE
}
}
### FAKE UNIT TEST
#addyPart("Ben White 710", c("710", "E", "Ben", "White", "Blvd")) # should be TRUE
#addyPart("Ben White", c("710", "E", "Ben", "White", "Blvd")) # should be FALSE
#bw <- getCrimes("710 E Ben White Blvd", crimes)
# make a list with a data frame for each store and all its crimes
scdf <- lapply(stores$address, getCrimes, crimes = crimes)
#make a data frame with counts for each address
storeCrimeCount <- data.frame(store = character(nrow(stores)),
address = character(nrow(stores)),
crimes = numeric(nrow(stores)), stringsAsFactors = F)
for (j in 1:nrow(stores)) {
storeCrimeCount[j, ] <- c(stores$store[j], stores$address[j], nrow(scdf[[j]]))
}
# look at the addresses with zero crimes
zeros <- storeCrimeCount[storeCrimeCount$crimes==0, ]
# what percentage of our data set is zero?
nrow(zeros) / nrow(stores)
# create data.frame with store info and total crimes count
stores <- cbind(stores, as.numeric(storeCrimeCount$crimes))
names(stores)[ncol(stores)] <- "crimes2014"
head(stores)
##### bring in economic data
econ <- read.csv("socio_econ.csv", header=T, stringsAsFactors = F)
master <- merge(stores, econ, by.x = 'zip', by.y = 'Zipcode')
names(master)[6:7] <- c("Long", "Lat")
#####
##### bring in KDE data
kde <- read.csv("storesKDE.csv", header=T, stringsAsFactors = F)
master <- merge(master, kde, by = c("store", "address"))
##### bring in bus stop data
bus <- read.csv("stores_stops.csv", header=T, stringsAsFactors = F)
master <- merge(master, bus, by = "address")
##### subset and save master
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
#write.csv(master, "MASTER_DATA.csv", row.names=F)
head(master)
master <- subset(master,
select = -c(X., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
master <- subset(master,
select = -c(X.VALUE., NA., Lat.y, Long.y, City, State,
average.SAT.score, High.school.drop., TotStud))
head(master)
write.csv(master, "MASTER_DATA.csv", row.names=F)
master <- read.csv("MASTER_DATA.csv", stringsAsFactors = F, header=T)
names(master)
mod11 <- lm(crimes2014 ~ CollegeGradPercent + closest_stops_in_meters + store, data = master)
mod12 <- lm(crimes2014 ~ KDEraw + closest_stops_in_meters + store, data = master)
MSE(mod11)
MSE(mod11, master)
MSE(mod12, master)
summary(mod11)
